/*******************************************************************************
 * Ech2o, a spatially-distributed, ecohydrologic simulator
 * Copyright (c) 2016 Marco Maneta <marco.maneta@umontana.edu>
 *
 *     This file is part of ech2o, a hydrologic model developed at the 
 *     University of Montana.
 *
 *     Ech2o is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Ech2o is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Ech2o.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contributors:
 *    Aaron Smith
 *******************************************************************************/
/*
 * Created on: Feb 2, 2020
 *     Author: Aaron Smith
 */
#include "Basin.h"

void Tracking::TracerMixing(Basin &bsn, Control &ctrl, 
			         double hold, //old volume
				 double iold, //old volume tracer
			         double &inew, //new volume tracer
				 double qin,  //incoming volume
				 double iin,  //incoming tracer
				 double qout, //outgoing volume
			         double &iout,//output tracer
			         double S,    // storage saturation
 			         int mixmod,
			         int r,
			         int c) 
{

  double hsum = 0;
  double f = 0;
  double intexp  = 0;
  double intfrac = 0;
  double nstep = 10; // this was chosen as it provides a reasonable "sub" step for incomplete mixing

  // --------------------------------------------------------------------------------------------------
  //   Incomplete mixing -- Kumaraswamy distribution (similar to beta distribution)
  double alpha = 0;
  double alphaMix = 0;
  double beta = 1;
  double mixfrac = 0; // mixing fraction of water for outflow
  double mixfracV= 0; // mixing fraction of water for storage - damped compared to outflow
  double stepin = 0;
  double stepout = 0;
  double stepV = 0;
  double istep_old = iold;
  double mixV = 0;
  double qout_iout=0;
  if (mixmod == 3){
    alpha = bsn.getIncompAlpha()->matrix[r][c];
    alphaMix = alpha > 1 ? 1/alpha : alpha;
    stepV = hold;
  }

  // MIX MOD 0
  if(mixmod==0){
     inew = hold + qin > RNDOFFERR ? (iold*hold + iin*qin)/ (hold + qin) : iold;
     iout = inew;
  }

  // MIX MOD 1  
  if(mixmod ==1) {
     hsum = 0.5*(hold+qin+std::max<double>(0,hold-qout));
     inew = 0.5*hsum+qin > RNDOFFERR ? 
	((iold+1000)*(hsum-0.5*qin) + (iin+1000)*qin)/ (hsum + 0.5*qin) -1000 : iold;
     iout = inew;
  }
  
  // MIX MOD 2
  if(mixmod == 2) {  // Gibson 2002 complete mixing approach -- corrected outflow of each soil layer
    if(qin > RNDOFFERR && hold > RNDOFFERR){// Check in there is inflow and initial volume
      // -------------TIME DEPENDENT APPROACH -------------------------
      if(abs(qin - qout) < RNDOFFERR){ 
	inew = iin - (iin - iold) * exp(-qin/hold);
        intexp = -(hold/qin)*exp(-qin/hold)-(-hold/qin); // definite integral of flux over the time-step
	iout = iin - (iin - iold) * intexp; // actual averaged outflow tracer
      // -------------FRACTION DEPENDENT APPROACH ---------------------
      } else {                              
	f = (hold + qin - qout)/hold;
	inew = iin - (iin - iold) * powl(f,(-1/(1-(qout/qin))));

	if(qout < RNDOFFERR){ // if there is no output then just use the volume tracer
	  iout = inew;
	} else {
	  intfrac = -hold * powl((1+(qin-qout)/hold) , (-qout/(qin - qout)))/qout - (-hold/qout);
	  iout = iin - (iin - iold) * intfrac;
	}
      } // end time/fraction checks

    } else {                                // If no inflow
      if(qin > RNDOFFERR){ // if inflow but no volume
       inew = iin;
       iout = iin;
      } else {             // if volume but no inflow
       inew = iold;
       iout = inew;
      }

    } // end mixing
  }

  // MIX MOD 3
  if(mixmod == 3) { // incomplete mixing using stepwise approach 
    /*
    cout << "Mixmod: " << mixmod << endl;
    cout << "stepV:  " << stepV  << endl;
    cout << "qin:    " << qin    << " |qout: " << qout << endl;
    cout << "iold:   " << iold << endl;
    */
    for (UINT4 j = 1; j < (nstep+1) ; j++) {
      stepin   = qin  * (powl((1 - powl((j - 1)/nstep,alpha)),beta)    - powl((1 - powl(j/nstep,alpha)),beta));
      mixfrac  = (powl((1 - powl((j - 1)/nstep,alphaMix)),beta) - powl((1 - powl(j/nstep,alphaMix)),beta));
      mixfracV = (powl((1 - powl((j - 1)/nstep, (alphaMix+1)/2 )),beta) - powl((1 - powl(j/nstep, (alphaMix+1)/2 )),beta));
      stepout  = qout * mixfrac;
      mixV    = (mixfracV > 0.1 ? (1 - mixfracV) * S: 1.0) * stepV;
      // iin  -- incoming isotopic composition does not change in time
      // iold -- current mixing storage isotopic composition

      /*  
      cout << "j: "      << j       << " |nstep:   " << nstep << endl;
      cout << "stepV:  " << stepV << endl;
      cout << "Stepin: " << stepin  << " |Stepout: " << stepout << endl;
      cout << "Mixfra: " << mixfrac << " |mixV:    " << mixV << endl;
      cout << "iin:    " << iin << endl;  
      */

      if(stepin > RNDOFFERR && mixV > RNDOFFERR){
	//	cout << "In & mixV ok" << endl;
	// -------------TIME DEPENDENT APPROACH -------------------------
	if(abs(stepin - stepout) < RNDOFFERR){
	  //	  cout << "Time-dependent" << endl;
	  inew = iin - (iin - istep_old) * exp(-stepin/mixV);
	  intexp = -(mixV/stepin)*exp(-stepin/mixV)-(-mixV/stepin); // definite integral of flux over the time-step
	  iout = iin - (iin - istep_old) * intexp; // actual averaged outflow tracer
        // -------------FRACTION DEPENDENT APPROACH ---------------------
	} else {
	  //	  cout << "Fraction-dependent" << endl;
	  f = (mixV + stepin - stepout) < 0 ? 1.0 : (mixV + stepin - stepout)/mixV;
	  inew = iin - (iin - istep_old) * powl(f,(-1/(1-(stepout/stepin)))); // new mixed iso volume
	  if(stepout < RNDOFFERR){ // if there is no ouput then just use the volume tracer
	    iout = inew;                                                      // new mixed iso outflow
	  } else {
	    intfrac = -mixV * powl((1+(stepin-stepout)/mixV) , (-stepout/(stepin - stepout)))/stepout - (-mixV/stepout);
	    iout = iin - (iin - istep_old) * intfrac;                         // new mixed iso outflow
	  }
	} // end time/fraction checks
      } else {
	//	cout << "In & mixV too small " << endl;
	if(stepin > RNDOFFERR){ // if inflow but no volume
	  inew = iin;
	  iout = iin;
	} else {             // if volume but no inflow
	  inew = iold;
	  iout = inew;
	}
      } // end the mixing

      //      cout << "inew: " << inew << " |iout: " << iout << endl;

      qout_iout += stepout * iout; // for isotope-flux weighting outflow
      stepV += stepin - stepout;   // update the total storage
      if (j == nstep){             // update the storage
	inew = (mixV*inew + (stepV - mixV) *iold)/(stepV);
      } else {
        mixfrac = (powl((1 - powl((j)/nstep,alphaMix)),beta) - powl((1 - powl((j+1)/nstep,alphaMix)),beta)); // next step volume

        mixfrac = (1 - std::max<double>(mixfrac - 1/nstep,0));
	/* 
	The current mixing storage needs to be updated with water from "unmixed" water in storage
	If the next mixing volume is greater than the current volume - add unmixed water   
	*/
	istep_old = stepV*mixfrac > mixV ? (mixV*inew + (stepV*mixfrac - mixV)*iold)/(stepV*mixfrac): inew; 
      }
      //      cout << "istep_old: " << istep_old << endl << endl;

    } // end the for loop

    iout = qout < RNDOFFERR ? inew : qout_iout / qout;

    // Update the storage based on the mass balance -- mass balance is 0 for all sub-time steps 

    inew = ((qin * iin) - (qout * iout) + (hold + qin/2 - qout/2)* iold - (qin - qout) * iold/2) / ( (hold + qin/2 - qout/2) + (qin - qout)/2);

    //    cout << "inew: " << inew << " |out: " << iout << endl << endl;

  } // end incomplete mixing
 
}
